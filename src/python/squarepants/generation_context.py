# Utility functions for generating BUILD files.

import json
import os
import sys


class GenerationContext(object):

  __DEFAULT_BUILD_NAME = 'BUILD'
  __DEFAULT_BUILD_NAME_GEN = 'BUILD.gen'
  __DEFAULT_BUILD_NAME_AUX = 'BUILD.aux'
  __DEFAULT_JVM_PLATFORM_NAME = '1.8'
  __DEFAULT_GENERATED_INI_FILE = 'squarepants/pants-jvm-platform-gen.ini'
  __DEFAULT_JOOQ_CONFIG_FILE = 'jooq_config.gen.xml'
  __DEFAULT_MODULE_LIST_FILE = 'modules.txt'

  def __init__(self,
               build_file_name=None,
               aux_build_file_name=None,
               hand_written_build_file_name=None,
               exclude_project_targets=None,
               print_headers=None,
               env_file_name=None,
               default_jvm_platform=None,
               jooq_config_file=None,
               module_list_file=None):
    """Stores flags for and provides utilities for generating BUILD files.

    :param build_file_name: the name for generated build files (default BUILD.gen).
    :param aux_build_file_name: the name for auxiliary build files (default BUILD.aux).
    :param hand_written_build_file_name: the name of hand written BUILD files (to check to see whether
      to generate BUILD.gen's or BUILD.aux's). (default BUILD).
    :param exclude_project_targets: these directories won't be considered as targets for regular
      projects.
    :param print_headers: whether to print the '# generated by <script_name> ... ' comments at the top
      of generated build files.
    :param module_list_file: file to write names of modules.
    """
    self.build_file_name = build_file_name or self.__DEFAULT_BUILD_NAME_GEN
    self.aux_build_file_name =  aux_build_file_name or self.__DEFAULT_BUILD_NAME_AUX
    self.hand_written_build_file_name = hand_written_build_file_name or self.__DEFAULT_BUILD_NAME
    self.exclude_project_targets = exclude_project_targets
    self.generated_ini_file = env_file_name or self.__DEFAULT_GENERATED_INI_FILE
    self.default_jvm_platform = default_jvm_platform or self.__DEFAULT_JVM_PLATFORM_NAME
    self.jooq_config_file = jooq_config_file or self.__DEFAULT_JOOQ_CONFIG_FILE
    self.module_list_file = module_list_file or self.__DEFAULT_MODULE_LIST_FILE
    if self.exclude_project_targets is None:
      self.exclude_project_targets = [
        'parents/external-protos',
      ]
    self.print_headers = print_headers
    if self.print_headers is None:
      self.print_headers = True
    self.platforms_to_settings = {}
    self.settings_to_platforms = {}
    self.pom_file_cache = {}
    self.os_to_java_homes = {}

  def get_pants_ini_gen(self):
    return [
      '[jvm-platform]',
      'default_platform: {}'.format(self.default_jvm_platform),
      self.jvm_platforms_string(),
      '',
      '[jvm-distributions]',
      'paths: {}'.format(self.jvm_distributions_string()),
      '',
      '[jvm]',
      '# Legacy, this can be removed after upgrading past 0.0.46',
      'jdk_paths: {}'.format(self.jvm_distributions_string()),
      ''
    ]

  def jvm_distributions_string(self):
    path_strings = []
    for os, paths in self.os_to_java_homes.items():
      path_strings.append('\n    {os}: {paths},'.format(os=json.dumps(os),
                                                       paths=json.dumps(paths)))
    return '{{{}\n  }}'.format(''.join(path_strings))

  def jvm_platforms_string(self):
    platform_strings = []
    for name, (source, target, args) in self.platforms_to_settings.items():
      platform_strings.append("\n    '{name}': {{'source': '{source}', 'target': '{target}', 'args': {args} }},"
                              .format(name=name,
                                      source=source,
                                      target=target,
                                      args=json.dumps(args)))
    return 'platforms: {{{}\n  }}'.format(''.join(platform_strings))

  def jvm_platform(self, target_level, source_level, compile_args):
    """Looks up or creates a jvm platform with the given settings, and returns its name.

    :param str target_level: target level (eg, 1.7)
    :param str source_level: source level (eg, 1.7)
    :param list compile_args: additional arguments for javac (eg -Xlint, -Xbootclasspath...)
    :return: the name of the platform or None. None causes the platform=... to be omitted from
      the target in the generated BUILD file, which results in the default platform being selected
      by pants at runtime.
    """
    if target_level is None and source_level is None:
      return None # Let it use the default platform.
    source_level = source_level or target_level
    target_level = target_level or source_level
    data = (source_level, target_level, tuple(compile_args or ()))
    if data in self.settings_to_platforms:
      return self.settings_to_platforms[data]
    # Compute a name for the data.
    basename = target_level
    name = basename
    index = 1
    while name in self.platforms_to_settings:
      if self.platforms_to_settings[name] == data:
        return name
      index += 1
      name = '{}-v{}'.format(basename, index)
    self.platforms_to_settings[name] = data
    self.settings_to_platforms[data] = name
    return name

  def format_spec(self, path=None, name=None):
    return "'{}:{}'".format(path or '', name or '')

  def is_aux(self, directory):
    return os.path.exists(os.path.join(directory, self.hand_written_build_file_name))

  def infer_target_name(self, directory, name):
    if name.startswith('aux-'):
      return name # Already aux'd, don't want to do again.
    if self.is_aux(directory):
      return 'aux-{name}'.format(name=name)
    return name

  def infer_build_name(self, directory):
    if self.is_aux(directory):
      return os.path.join(directory, self.aux_build_file_name)
    return os.path.join(directory, self.build_file_name)

  def write_build_file(self, path, contents):
    """Conditionally Write the BUILD file out to the filesystem"""
    outfile_name = self.infer_build_name(path)
    if (self.print_headers):
      header = '# {filepath}\n# Automatically generated by {gen_script}\n'.format(
        filepath=outfile_name,
        gen_script=os.path.basename(sys.argv[0]))
      contents = header + contents
    with open(outfile_name, 'w') as outfile:
      outfile.write(contents)
